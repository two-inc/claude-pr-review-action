name: 'Claude Code Review'
description: 'Automated code reviews using Claude AI'
author: 'Two Inc'

inputs:
  anthropic_api_key:
    description: 'Anthropic API key for Claude'
    required: true
  track_progress:
    description: 'Enable visual progress tracking comments'
    required: false
    default: 'false'
  use_sticky_comment:
    description: 'Use sticky comments for consistent feedback across PR updates'
    required: false
    default: 'true'
  prompt:
    description: 'Custom review prompt'
    required: false
    default: |
      REPO: ${{ github.repository }}
      PR NUMBER: ${{ github.event.pull_request.number }}

      **STEP 1 - Determine PR Type**:
      First, use `mcp__github__get_pull_request` to read the PR title, description, and branch names to determine if this is a release PR.

      **Release PR Detection**:
      If the PR title, branch name, or description contains patterns like "release", "version", "v[0-9]", "bump", "tag", or if it's merging a release branch to main, treat it as a release PR.

      **For Release PRs**: Create a release summary instead of a detailed review:
      1. **MANDATORY - Check for existing summaries**: Use `mcp__github__get_pull_request_comments` to see if a release summary already exists
      2. **NEVER duplicate summaries**: If a release summary comment already exists, DO NOT create another one
      3. **Create release summary**: Use `mcp__github__create_pull_request_comment` to post a single comprehensive release summary covering:
         - Key features and changes
         - Breaking changes or migrations needed
         - Notable bug fixes
         - Dependencies or version updates
         - Any security improvements
      4. **Do NOT create a review**: Skip the normal review process entirely

      **For Regular PRs**: Follow normal review process with extreme selectivity:
      1. **MANDATORY - Read ALL existing comments FIRST**: Use `mcp__github__get_pull_request_review_comments` to retrieve ALL existing review comments from Claude and other reviewers BEFORE starting anything
      2. **Start a review**: Use `mcp__github__create_pending_pull_request_review` to begin a pending review
      3. **Get diff information**: Use `mcp__github__get_pull_request_diff` to understand the code changes and line numbers
      4. **Cross-reference with existing comments**: Before making ANY comment, check if the same issue has already been raised by Claude or any other reviewer in previous comments
      5. **Add inline comments**: Use `mcp__github__add_comment_to_pending_review` ONLY for critical issues that have NOT been previously mentioned
      6. **Submit or delete review**:
         - If you added comments: Use `mcp__github__submit_pending_pull_request_review` with event type "COMMENT" to publish comments
         - If no comments were added: Use `mcp__github__delete_pending_pull_request_review` to delete the empty pending review
      7. **Mark resolved comments as resolved**: Use `Bash(gh api: *)` to resolve comments using the API if they have been addressed

      **ONLY comment on these critical issues:**
      - **Security vulnerabilities** (SQL injection, XSS, authentication bypasses, etc.)
      - **Critical bugs** that will cause runtime failures, data corruption, or crashes
      - **Memory leaks** or severe performance bottlenecks
      - **Breaking API changes** that will break existing functionality
      - **Data loss risks** or unsafe database operations

      **DO NOT comment on:**
      - Minor style issues or formatting
      - Subjective code organisation preferences
      - Non-critical performance optimisations
      - Minor refactoring suggestions
      - Documentation improvements
      - Variable naming (unless genuinely confusing)
      - Code that works correctly but could be "better"

      **Rules:**
      - **NEVER duplicate existing comments**: If Claude or any other reviewer has already mentioned an issue, DO NOT comment on it again
      - If unsure whether an issue is critical enough, DON'T comment
      - If unsure whether an issue has already been raised, DON'T comment
      - Maximum 3 comments per PR unless there are genuine security/critical issues
      - Each comment must identify a specific, actionable problem that risks system stability, security, or data integrity
      - If no NEW critical issues found (beyond what's already been commented), delete the pending review instead of submitting an empty one
  extra_prompt:
    description: 'Additional instructions to append to the base prompt'
    required: false
    default: ''
  claude_args:
    description: 'Additional Claude CLI arguments'
    required: false
    default: '--allowedTools "mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__create_pull_request_comment,mcp__github__create_pending_pull_request_review,mcp__github__add_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__delete_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_review_comments,Bash(gh api:*)"'

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Run Claude Code Review
      uses: anthropics/claude-code-action@v1
      with:
        anthropic_api_key: ${{ inputs.anthropic_api_key }}
        track_progress: ${{ inputs.track_progress }}
        use_sticky_comment: ${{ inputs.use_sticky_comment }}
        prompt: |
          ${{ inputs.prompt }}

          ${{ inputs.extra_prompt }}
        claude_args: ${{ inputs.claude_args }}
